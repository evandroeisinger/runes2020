Introduction to Go and TDD
A short workshop
12 Oct 2019
Tags: golang, tdd, testing, unicode

Luciano Ramalho
Principal Consutant, ThoughtWorks
luciano.ramalho@thoughtworks.com
https://standupdev.com/
@ramalhoorg

* Workshop idea

- Make the most of our time together
- Lots of live coding, together
- Simple yet complete app built from tests
- Discuss TDD styles and variations
- Brief overview of tools and libraries
- References for further study

* Required assets

- Go 1.12 or 1.13 ([[https://golang.org/dl/][download]])
- Go `present` tool:
   $ go install golang.org/x/tools/cmd/present
- Package [[https://godoc.org/github.com/stretchr/testify/assert][testify/assert]]:
   $ go get github.com/stretchr/testify/assert
- Tutorial [[https://github.com/standupdev/runes201][repo]]:
   $ git clone --depth 1 https://github.com/standupdev/runes2019.git

*Note*: you can see these slides on your machine if you run the `present` command in the `runes2019` directory you just cloned.

  $ present
  2019/10/02 21:41:29 Open your web browser and visit http://127.0.0.1:3999

* What we will build

`runes`: a CLI tool to find Unicode characters by name.

    $ ./runes fire
    U+2632	‚ò≤	TRIGRAM FOR FIRE
    U+2EA3	‚∫£	CJK RADICAL FIRE
    U+2F55	‚Ωï	KANGXI RADICAL FIRE
    U+322B	„à´	PARENTHESIZED IDEOGRAPH FIRE
    U+328B	„äã	CIRCLED IDEOGRAPH FIRE
    U+4DDD	‰∑ù	HEXAGRAM FOR THE CLINGING FIRE
    U+1F525	üî•	FIRE
    U+1F692	üöí	FIRE ENGINE
    U+1F6F1	üõ±	ONCOMING FIRE ENGINE
    U+1F702	üúÇ	ALCHEMICAL SYMBOL FOR FIRE
    10 characters found


* How `runes` works

The [[https://home.unicode.org/][Unicode Consortium]] maintains the [[http://www.unicode.org/ucd/][Unicode Character Database]]. It includes the file [[https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt][UnicodeData.txt]], with the names of more than 32.000 characters. It looks like this:

    0037;DIGIT SEVEN;Nd;0;EN;;7;7;7;N;;;;;
    0038;DIGIT EIGHT;Nd;0;EN;;8;8;8;N;;;;;
    0039;DIGIT NINE;Nd;0;EN;;9;9;9;N;;;;;
    003A;COLON;Po;0;CS;;;;;N;;;;;
    003B;SEMICOLON;Po;0;ON;;;;;N;;;;;
    003C;LESS-THAN SIGN;Sm;0;ON;;;;;Y;;;;;
    003D;EQUALS SIGN;Sm;0;ON;;;;;N;;;;;
    003E;GREATER-THAN SIGN;Sm;0;ON;;;;;Y;;;;;
    003F;QUESTION MARK;Po;0;ON;;;;;N;;;;;
    0040;COMMERCIAL AT;Po;0;ON;;;;;N;;;;;
    0041;LATIN CAPITAL LETTER A;Lu;0;L;;;;;N;;;;0061;
    0042;LATIN CAPITAL LETTER B;Lu;0;L;;;;;N;;;;0062;
    0043;LATIN CAPITAL LETTER C;Lu;0;L;;;;;N;;;;0063;


* Getting character names from Go

The semi-official package [[https://godoc.org/golang.org/x/text/unicode/runenames][runenames]] provides a single function `Name` returning the character name of the given `rune`.

.play -edit assets/name.go


* Beginning TDD

* First test: an example test

Source: `github.com/standupdev/runes2019/step01/runes/...`

.code runes011/main_test.go

To run, go where that file is saved. Then:

    $ go test
    # github.com/standupdev/runes2019/step01/runes [...]
    ./main_test.go:4:2: undefined: main
    FAIL	github.com/standupdev/runes2019/step01/runes [build failed]

* First test passing

.code runes011/main_test.go

.code runes011/main.go

Run the test:

    $ go test
    PASS
    ok  	github.com/standupdev/runes2019/step01/runes	0.006s

* Lab 1.1

*1.* Create a directory named `‚Ä¶/go/src/runes2019-10-12/lab01`

*2.* In `lab01/`, create `main_test.go` with the code shown in the previous slide.

*3.* Run `go test`. Make sure the error message is what you expect.

*4.* Create `main.go` with the code shown in the previous slide.

*5.* Run `go test`. The test should pass.

*6.* Browse these references:

- [[https://blog.golang.org/examples][The Go Blog: Testable Examples in Go]]
- *Examples* section in the [[https://golang.org/pkg/testing/#hdr-Examples][testing package documentation]]


* Go syntax

* Basic source file structure

.code runes011/main.go

- Every Go source code file must start with a `pagkage` declaration; `package main` is the name conventionally used for code that implements a stand-alone program (as opposed to a library).

- The second statement is usually `import`, naming libraries as simple strings or repository paths.

- Functions start with `func`, followed by an identifier, an optional list of arguments in parenthesis, an optional list of return types, and the opening `{` ‚Äî which must be in that same line. We'll see how to declare arguments and return types later.

* Basics of types and variables

Go is a statically typed language, but it implements _type_inference_.

This means you can write code declaring only the types of function arguments and return values, without declaring the types of variables most of the time.

When you use the `:=` operator to make the first assignment to a new variable in the source code, the Go compiler _infers_ (guesses) the type of the variable from the right-hand expression.

Further assigments to the same variable in the same scope must use `=` (not `:=`), and cannot change the type of the variable.

* A few types

.play -edit assets/sometypes.go

* The `rune` type

- The character type in Go is `rune`, an alias for `int32`.

- The constant literal `0x2108` is an `int`.

- To code a `rune` literal using that character code you have write it as `\u2108`.

- You can get a `rune` from an `int` (with 32 bits or less) with `rune(myInt)`

* A few different ways to display a `rune`

.play -edit assets/int2rune.go

Read about _formatting_verbs_ `%T`, `%v`, `%q` etc. in the [[https://golang.org/pkg/fmt/][`fmt` package documentation]].


* Second test

    func Example_report() {
        report("scruple")
        // Output:
        // U+2108	‚Ñà	SCRUPLE
        // 1 character found
    }

The report lists characters with three fields, separated by tabs:

- Character _codepoint_ as `U+` followed by 4, 5 or 6 hexadecimal digits;
- The character;
- Name of the character, all uppercase.

Last line of the report shows count of characters found, or "no character found".

*NOTE:* The word "scruple" appears only once in the Unicode Character Database; it's an old weight measurement ‚âÖ 1.3g.

* Lab 1.2

*1.* Add the `Example_report` test to `main_test.go`.

*2.* Run `go test`. Is the error message what you expected?

*3.* Edit `main.go` to make the test pass. Don't implement any logic or formatting yet; just hard-code the printed string to make the test pass.

*4.* Edit the `report` function creating three variables: `char`, `name`, `count` with suitable values. Use `fmt.Printf` to build each line of the report to make the test pass.

*Tips*

- The new function will have the signature below (we will change that later):

  func report(word string) {

- Use the `runenames.Name(char)` function get the name of the `rune`. Recall the different ways to show a rune we saw before.

* Lab 1.2 solution

.code runes012/main.go
