Introduction to Go and TDD
A short workshop
12 Oct 2019
Tags: golang, tdd, testing, unicode

Luciano Ramalho
Principal Consutant, ThoughtWorks
luciano.ramalho@thoughtworks.com
https://standupdev.com/
@ramalhoorg

* Generating named characters

* Unassigned and unnamed characters

Unicode has room for 1,114,111 _code_points_, from U+0000 to U+10FFFF. About 10% of those code points have characters assigned to them as of 2019.

Among the assigned characters, more than 70% are CJK (Chinese/Japanese/Korean) ideographs that don't have names. For example, here is what the `runenames.Name` function says about the traditional Chinese character 氣 (qi), representing vital energy:

.play -edit assets/qi.go

* Ranges of characters with generic names

.play -edit assets/noname.go

* Scanning the UCD

Given a `rune` value, `runenames.Name` returns:

- an empty string, if the code point is unnassigned;
- a string delimited by `<…>`, if the code point is part of a range of unnamed characters; 
- a unique character name — this is what we want.

We'll code a `scan` function to return a slice of `CharName` structs for characters that have a unique name, skipping all the others.

To make testing easier, `scan` will take two integer arguments setting the start and end of the range of code points to be scanned. The end code point will be excluded. For example, this call will return a slice with `CharName` structs for the letters 'A', 'B', 'C':

    abc := scan(65, 68)

* Baby step 1: return slice with one `CharName`

Our first test of `scan` verifies that `scan(65, 66)` returns a slice with one element, the `CharName` for the letter 'A':

.code -numbers runes021/main_test.go /^func Test_scan_A/,/^}/

Note the syntax for literal struct and slice of structs:

    CharName{'A', "LATIN CAPITAL LETTER A"}  // a simple struct value

    []CharName{CharName{'A', "LATIN CAPITAL LETTER A"}}  // a slice with one struct item

    []CharName{{'A', "LATIN CAPITAL LETTER A"}}  // short syntax for slice with struct item(s)

* Baby step 1: satisfy previous test

At first: satisfy what is tested, and only what is tested.

    func scan(start, end int) []CharName {
        return []CharName{{'A', "LATIN CAPITAL LETTER A"}}
    }

Yes: returning a hard-coded literal is often a good first step.

.code runes021/main.go /^func scan/,/^}/

* Baby step 2: return slice with three `CharName`

